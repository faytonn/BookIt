// <auto-generated />
using System;
using BookIt.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookIt.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250209201436_addedIdToGenLoc")]
    partial class addedIdToGenLoc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookIt.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectedLanguage")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.CancellationRefund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("bit");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("CancellationRefund", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.CategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryDetails");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModeratorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GeneralLocationId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<string>("PriceRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GeneralLocationId");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("HallId");

                    b.HasIndex("LocationId");

                    b.ToTable("EventDetails", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.EventDetailSeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("EventId");

                    b.HasIndex("SeatTypeId");

                    b.ToTable("EventSeatTypes", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.GeneralLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("GeneralLocations", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Halls", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LangaugeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738784159/bookit./UK%20Flag.svg",
                            IsoCode = "en",
                            LangaugeName = "EN"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738784159/bookit./AZE%20Flag.png",
                            IsoCode = "az",
                            LangaugeName = "AZE"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738783701/bookit./CZE%20Flag.svg",
                            IsoCode = "cze",
                            LangaugeName = "CS"
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 2, 9, 21, 14, 35, 109, DateTimeKind.Local).AddTicks(3248),
                            CreatedBy = "Default",
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738786112/bookit./HitMeHardAndSoft.jpg",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 2, 9, 21, 14, 35, 109, DateTimeKind.Local).AddTicks(3353),
                            CreatedBy = "Default",
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738786345/bookit./KendrickLamar.webp",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 2, 9, 21, 14, 35, 109, DateTimeKind.Local).AddTicks(3361),
                            CreatedBy = "Default",
                            ImagePath = "https://res.cloudinary.com/di3ourpee/image/upload/v1738786457/bookit./paddington3.jpg",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Within hours of its release, Hit Me Hard and Soft surged to the top of major streaming platforms, breaking previous records for the fastest-streamed album debut. Industry insiders attribute this rapid success to Eilish’s massive global fanbase and the album's fresh take on modern pop and alternative music. “Billie has a rare ability to reinvent her sound while staying true to her artistic vision,” commented a representative from a leading music analytics firm. “The record-breaking numbers are a testament to her influence and the universal appeal of this album.”\r\n\r\n",
                            LanguageId = 1,
                            NewsId = 1,
                            Title = "Billie Eilish's album 'Hit Me Hard And Soft' has set a new record"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Çıxışından bir neçə saat sonra, Hit Me Hard and Soft əsas axın platformlarında zirvəyə çatdı və ən sürətli axın edilən albom debütü üçün əvvəlki rekordları sarsıtdı. Sənaye mütəxəssisləri bu sürətli uğuru Eilish-in qlobal fan bazasının genişliyi və albomun müasir pop və alternativ musiqiyə gətirdiyi təzə yanaşmaya bağlayır. “Billie səsini yenidən kəşf etmək və bədii vizyonuna sadiq qalmaq bacarığı ilə nadir bir istedaddır,” – deyə şərh etdi aparıcı musiqi analitik şirkətinin nümayəndəsi. “Rekord qıran rəqəmlər onun təsir gücünün və albomun universal cazibəsinin canlı sübutudur.",
                            LanguageId = 2,
                            NewsId = 1,
                            Title = "Billie Eilish-in \"Hit Me Hard And Soft\" albomu yeni rekorda imza atıb"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Během několika hodin od vydání se album Hit Me Hard and Soft dostalo na vrchol předních streamovacích platforem a překonalo předchozí rekordy nejrychleji streamovaného debutu alba. Odborníci z oboru připisují tento rychlý úspěch masivní globální fanouškovské základně Eilish a svěžímu pohledu alba na moderní pop a alternativní hudbu. „Billie má vzácnou schopnost znovu objevit svůj zvuk a zároveň zůstat věrná své umělecké vizi,“ poznamenal zástupce přední hudební analytické firmy. „Rekordní čísla jsou důkazem jejího vlivu a univerzální přitažlivosti tohoto alba.",
                            LanguageId = 3,
                            NewsId = 1,
                            Title = "Album Billie Eilish 'Hit Me Hard And Soft' vytvořilo nový rekord"
                        },
                        new
                        {
                            Id = 4,
                            Description = "In a jaw-dropping turn of events, Kendrick Llamar has swept the Grammy Awards by winning five major categories in one night—all thanks to his explosive diss track aimed at rap superstar Drake. The track, which has taken the music world by storm, features razor-sharp lyrics and an electrifying beat that has left critics and fans in awe. Industry insiders are hailing the win as a turning point in the longstanding rivalry between the two rap titans. “Kendrick’s daring approach has redefined the boundaries of hip-hop,” commented a Grammy committee member. The diss track not only resonated powerfully with fans but also set new benchmarks for lyrical prowess and artistic innovation in the genre.",
                            LanguageId = 1,
                            NewsId = 2,
                            Title = "Kendrick Llamar Wins 5 Grammys in a Single Night with Explosive Diss Track for Drake"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Şaşırtıcı hadisələrlə dolu bir gecədə, Kendrick Llamar rap super ulduzu Drake-ə qarşı olan partlayıcı diss treki sayəsində beş əsas kateqoriyada Grammy mükafatını qazanaraq böyük uğur əldə etdi. Musiqi dünyasını əsir edən bu parça, kəskin sözləri və elektrikli ritmi ilə tənqidçiləri və pərəstişkarları valeh etdi. Sənaye mütəxəssisləri bu qalibiyyəti iki rap nəhənginin uzun müddətli rəqabətində dönüm nöqtəsi kimi qiymətləndirirlər. “Kendrick-in cəsur yanaşması hip-hop sərhədlərini yenidən müəyyənləşdirdi,” – deyə Grammy komitəsinin üzvü şərh etdi. Diss treki yalnız pərəstişkarların qəlbinə toxunmaqla qalmayıb, həm də janrda söz ustalığı və bədii innovasiya üçün yeni standartlar qoydu.",
                            LanguageId = 2,
                            NewsId = 2,
                            Title = "Kendrick Llamar Drake-ə Hədəf Alan Partlayıcı Diss Treki ilə Bir Gecədə 5 Grammy Qazanır"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ve velkolepém obratu událostí si Kendrick Llamar vybojoval Grammy Awards, když během jediné noci získal pět hlavních kategorií – a to díky svému explozivnímu disstracku, který míří na rapovou superhvězdu Drakea. Singl, který otřásl hudebním světem, se vyznačuje ostrými texty a elektrizujícím beatem, který ohromil kritiky i fanoušky. Odborníci z oboru označují tento úspěch za zlomový moment v dlouhotrvající rivalitě mezi těmito dvěma rapovými giganty. „Kendrickův odvážný přístup redefinoval hranice hip-hopu,“ komentoval člen Grammy komise. Disstrack nejenže silně rezonoval s fanoušky, ale také nastavil nové standardy pro lyrickou zdatnost a umělecké inovace v tomto žánru.",
                            LanguageId = 3,
                            NewsId = 2,
                            Title = "Kendrick Llamar získal 5 Grammy jedné noci s explozivním disstrackem namířeným na Drakea"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Paddington 3 returns this summer with a delightful new adventure that reunites fans with the lovable bear. Blending classic charm with modern twists, the film promises heartwarming moments, clever humor, and plenty of surprises for audiences of all ages.",
                            LanguageId = 1,
                            NewsId = 3,
                            Title = "Paddington 3: The Beloved Bear Returns for Another Heartwarming Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Paddington 3 bu yay sevilən ayıcığı ilə tamaşaçıları yenidən bir araya gətirən gözəl bir macəra ilə geri dönür. Klassik cazibəni müasir tərzlərlə birləşdirən film, hər yaşdan izləyicilər üçün ürəkaçan anlar, ağıllı yumor və bir çox sürpriz vəd edir.",
                            LanguageId = 2,
                            NewsId = 3,
                            Title = "Paddington 3: Sevimli Ayıcıq Yenidən Möhtəşəm Macəraya Qayıdır"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Paddington 3 se toto léto vrací s kouzelným novým dobrodružstvím, které opět spojuje fanoušky s milovaným medvídkem. Spojující klasické kouzlo s moderními prvky, film slibuje dojemné chvíle, chytrý humor a spoustu překvapení pro diváky všech věkových kategorií.",
                            LanguageId = 3,
                            NewsId = 3,
                            Title = "Paddington 3: Oblíbený medvídek se vrací s další dojemnou dobrodružnou cestou"
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.NotificationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationDetails", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTransactions", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentTransactionId")
                        .IsUnique()
                        .HasFilter("[PaymentTransactionId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.ReservationSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReservationSeat");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating_Range", "[Rating] >= 0 AND [Rating] <= 5");
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int");

                    b.Property<string>("SeatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("SeatRow", "SeatColumn", "HallId")
                        .IsUnique();

                    b.ToTable("Seats", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("SeatTypes", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Office Address"
                        },
                        new
                        {
                            Id = 2,
                            Key = "SupportPhone"
                        },
                        new
                        {
                            Id = 3,
                            Key = "InstagramLink"
                        },
                        new
                        {
                            Id = 4,
                            Key = "FacebookLink"
                        },
                        new
                        {
                            Id = 5,
                            Key = "TwitterLink"
                        },
                        new
                        {
                            Id = 6,
                            Key = "YoutubeLink"
                        },
                        new
                        {
                            Id = 7,
                            Key = "Email"
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.SettingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SettingId", "LanguageId");

                    b.ToTable("SettingDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            SettingId = 1,
                            Value = "Narimanov region, street Tabriz 41"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            SettingId = 1,
                            Value = "Nərimanov rayonu, Təbriz küçəsi 41"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 3,
                            SettingId = 1,
                            Value = "Oblast Nərimanov, ulice Tabríz 41"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 1,
                            SettingId = 2,
                            Value = "*4141"
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 2,
                            SettingId = 2,
                            Value = "*4141"
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 3,
                            SettingId = 2,
                            Value = "*4141"
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            SettingId = 3,
                            Value = "https://www.instagram.com/"
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            SettingId = 3,
                            Value = "https://www.instagram.com/"
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 3,
                            SettingId = 3,
                            Value = "https://www.instagram.com/"
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 1,
                            SettingId = 4,
                            Value = "https://www.facebook.com/"
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = 2,
                            SettingId = 4,
                            Value = "https://www.facebook.com/"
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = 3,
                            SettingId = 4,
                            Value = "https://www.facebook.com/"
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = 1,
                            SettingId = 5,
                            Value = "https://x.com/"
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = 2,
                            SettingId = 5,
                            Value = "https://x.com/"
                        },
                        new
                        {
                            Id = 15,
                            LanguageId = 3,
                            SettingId = 5,
                            Value = "https://x.com/"
                        },
                        new
                        {
                            Id = 16,
                            LanguageId = 1,
                            SettingId = 6,
                            Value = "https://www.youtube.com/"
                        },
                        new
                        {
                            Id = 17,
                            LanguageId = 2,
                            SettingId = 6,
                            Value = "https://www.youtube.com/"
                        },
                        new
                        {
                            Id = 18,
                            LanguageId = 3,
                            SettingId = 6,
                            Value = "https://www.youtube.com/"
                        },
                        new
                        {
                            Id = 19,
                            LanguageId = 1,
                            SettingId = 7,
                            Value = "bookit.aze@gmail.com"
                        },
                        new
                        {
                            Id = 20,
                            LanguageId = 2,
                            SettingId = 7,
                            Value = "bookit.aze@gmail.com/"
                        },
                        new
                        {
                            Id = 21,
                            LanguageId = 3,
                            SettingId = 7,
                            Value = "bookit.aze@gmail.com/"
                        });
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Sliders", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.WaitlistEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventId1");

                    b.HasIndex("UserId");

                    b.ToTable("WaitlistEntries", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookIt.Domain.Entities.CancellationRefund", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Reservation", "Reservation")
                        .WithOne("CancellationRefund")
                        .HasForeignKey("BookIt.Domain.Entities.CancellationRefund", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Category", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.CategoryDetail", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Chat", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Event", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.GeneralLocation", "GeneralLocation")
                        .WithMany()
                        .HasForeignKey("GeneralLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("GeneralLocation");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.EventDetail", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Event", "Event")
                        .WithOne("EventDetail")
                        .HasForeignKey("BookIt.Domain.Entities.EventDetail", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Hall", "Hall")
                        .WithMany("EventDetails")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.GeneralLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Hall");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.EventDetailSeatType", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.EventDetail", "EventDetail")
                        .WithMany()
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Event", null)
                        .WithMany("EventSeatTypes")
                        .HasForeignKey("EventId");

                    b.HasOne("BookIt.Domain.Entities.SeatType", "SeatType")
                        .WithMany("EventSeatTypes")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Hall", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.GeneralLocation", "Location")
                        .WithMany("Halls")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Message", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("News");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.NotificationDetail", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", null)
                        .WithMany("Reservations")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("BookIt.Domain.Entities.Event", "Event")
                        .WithMany("Reservations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.PaymentTransaction", "PaymentTransaction")
                        .WithOne("Reservation")
                        .HasForeignKey("BookIt.Domain.Entities.Reservation", "PaymentTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PaymentTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.ReservationSeat", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservationSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Seat", "Seat")
                        .WithMany("ReservationSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Review", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Seat", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.SeatType", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.SettingDetail", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Setting", "Setting")
                        .WithMany("SettingDetails")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.WaitlistEntry", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.Event", null)
                        .WithMany("WaitlistEntries")
                        .HasForeignKey("EventId1");

                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookIt.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookIt.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Messages");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryDetails");

                    b.Navigation("ChildCategories");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventDetail");

                    b.Navigation("EventSeatTypes");

                    b.Navigation("Reservations");

                    b.Navigation("WaitlistEntries");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.GeneralLocation", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Hall", b =>
                {
                    b.Navigation("EventDetails");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationDetails");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("CancellationRefund");

                    b.Navigation("ReservationSeats");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Seat", b =>
                {
                    b.Navigation("ReservationSeats");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.SeatType", b =>
                {
                    b.Navigation("EventSeatTypes");
                });

            modelBuilder.Entity("BookIt.Domain.Entities.Setting", b =>
                {
                    b.Navigation("SettingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
